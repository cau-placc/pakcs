############################################################################
# PAKCS configuration file
#
# The syntax of this file is 
#
# property=value\n
#
# Lines starting with '#' are comments.
#
############################################################################

# Default parameters that are always passed as initial parameters to PAKCS
# (e.g., ":set +time :set +interactive")
defaultparams=

# Define path for searching modules in addition to standard PAKCS libraries:
# (this path is placed in front of the standard PAKCS library path)
libraries=

# Default value when asking for more solutions (values: yes | no | all)
moresolutions=yes

# Allow Curry extensions, i.e., functional patterns and anonymous free variables
# (values: yes | no):
curryextensions=yes

# Show warnings for non-trivial overlapping rules (values: yes | no)
warnoverlapping=yes

# System command to edit the source file of a Curry program
# (if not defined, the value of the environment variable EDITOR is used)
editcommand=

# System command to show the source file of a Curry program
# (if not defined, the value of the environment variable PAGER is used)
showcommand=

# System command to view (Graphviz) dot graphs that come from stdin
# (e.g., used in CPM, Curry browser, erd2curry tools)
dotviewcommand=dot -Tpdf > /tmp/dotxxx.pdf && xdg-open /tmp/dotxxx.pdf

# Optimize Boolean equalities (==): transform them into binding
# constraints (=:=) whenever they must be evaluated only to True.
# possible values:
#   no   (do not optimize)
#   fast (optimize w.r.t. standard Prelude)
#   full (perform full program analysis to optimize more occurrences)
bindingoptimization=fast

# The shell command used by the REPL command ':info ...' to show information
# about some entity. The kind of entity (--operation|--type|--class) and
# the module and entity name are appended to this command.
# After using cpm-query for the first time, one can adjust its behavior
# by modifying the file "~/.cpmqueryrc".
infocommand=cpm-query --color

# Show parse errors when parsing terms with ReadShowTerm.read(sQ)Term
# (values: yes | no)
readtermerrors=no

# Create smaller saved states without the interactive system and compiler
# with the command ":save expression" (take slightly more time)
# Values: yes | no
smallstate=no

# Create stand-alone executables when saving states via ":save" command
# (works only with Sicstus 3.10 or higher).
# Values: yes | no
standalone=no

# The temporary directory where generated auxiliary files are stored.
# Should be writable for the PAKCS process.
tmpdir=/tmp

# Should the generated main Prolog file (containing hnf and other generic
# clauses) be kept (in /tmp/pakcsprogXXXX.pl.main)?
# (values: yes | no )
# Usually, it is deleted, i.e., "yes" might be useful for debugging
keepfiles=no

############################################################################
