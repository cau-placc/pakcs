#!/bin/sh
# Build PAKCS from git repository or download pages and test it

# name of build host:
#BUILDHOST=lascombes.informatik.uni-kiel.de
BUILDHOST=bellecombe.informatik.uni-kiel.de

# build directory:
BUILDDIR=$HOME/tmp/pakcs

# make options:
#MAKEOTPS=-j -O
MAKEOPTS=

# set PATH with appropriate ghc version:
#PATH=$HOME/.cpm/bin:/opt/ghc/bin:/usr/bin:/bin
PATH=$HOME/.cpm/bin:/usr/local/bin:/usr/bin:/bin
export PATH

# common prefix for all log files:
LOGFILEPREFIX=$HOME/tmp/BUILDLOG.PAKCS

# If script is started on medoc, execute it on build host:
if [ "`hostname -s`" = medoc ] ; then
  exec ssh $BUILDHOST $0
fi

exit_with_message() {
  echo "ERROR OCCURRED WHILE EXECUTING $0 !!!!!!!!!!!!!!!!!"
  echo "Contents of $LOGFILE:"
  cat $LOGFILE
  exit
}

trap "exit_with_message" 1 2 13 15

# show contents of log file (but don't exit):
show_logfile() {
  echo "ERROR OCCURRED WHILE EXECUTING $0 !!!!!!!!!!!!!!!!!"
  echo "Contents of $LOGFILE:"
  cat $LOGFILE
}

# Generate local version of CurryCheck:
gen_currycheck() {
  bin/cypm -d curry_bin=`pwd`/bin/pakcs -d bin_install_path=`pwd`/bin -d app_package_path=`pwd`/app_packages install currycheck
  ln -s `pwd`/bin/curry-check `pwd`/bin/pakcs-check
  PATH=`pwd`/bin:$PATH
  export PATH
}

# build PAKCS from git repositorry with some back end (sicstus4, swi)
build_git_pakcs()
{
  BACKEND=$1
  BRANCH=$2
  LOGFILE=$LOGFILEPREFIX.GIT.`echo $BRANCH.$BACKEND | tr '/' '_'`

  cd $HOME
  echo "=========================================================" > $LOGFILE
  echo "STARTING PAKCS GIT/$BRANCH BUILD ON `hostname` AT `date`" >> $LOGFILE
  # clone the repository
  rm -rf $BUILDDIR
  git clone https://git.ps.informatik.uni-kiel.de/curry/pakcs.git $BUILDDIR >> $LOGFILE 2>&1

  # Build the system
  cd $BUILDDIR
  git checkout $BRANCH >> $LOGFILE 2>&1
  git submodule init   >> $LOGFILE 2>&1
  git submodule update >> $LOGFILE 2>&1
  cp $HOME/home/curry/pakcs/build/pakcs_variables.$BACKEND pakcsinitrc
  # do not make manual:
  rm -rf docs/src
  make $MAKEOPTS >> $LOGFILE 2>&1
  if [ $? -gt 0 ] ; then exit_with_message ; fi
  bin/curry :load AllLibraries :eval "3*13+3" :quit >> $LOGFILE 2>&1


  # Run the unit tests:
  gen_currycheck >> $LOGFILE 2>&1
  make $MAKEOPTS runtest >> $LOGFILE 2>&1
  if [ $? -gt 0 ] ; then
    show_logfile
  else
    echo "SUCCESSFULLY FINISHED PAKCS GIT BUILD ON `hostname` AT `date`" >> $LOGFILE
    # clean
    #cd $HOME && rm -rf $BUILDDIR
  fi
}

# build PAKCS download version with given some back end
build_download_pakcs()
{
  VERSION=$1   # version number
  DLVERSION=$2 # download version (src, amd64-Linux)
  BACKEND=$3   # backend (sicstus4, swi)

  LOGFILE=$LOGFILEPREFIX.$VERSION.`echo $DLVERSION.$BACKEND | tr '/' '_'`
  # name of PAKCS download main directory:
  PAKCSVERSION=pakcs-$VERSION
  # build directory:
  DISTDIR=$HOME/tmp/$PAKCSVERSION

  cd `dirname $DISTDIR`
  echo "=========================================================" > $LOGFILE
  echo "STARTING PAKCS DOWNLOAD BUILD ON `hostname` AT `date`" >> $LOGFILE
  # download distribution
  rm -rf $DISTDIR
  wget http://www.informatik.uni-kiel.de/~pakcs/download/$PAKCSVERSION-$DLVERSION.tar.gz >> $LOGFILE 2>&1
  tar xvzf $PAKCSVERSION-$DLVERSION.tar.gz >> $LOGFILE 2>&1
  rm $PAKCSVERSION-$DLVERSION.tar.gz

  # Build the system
  cd $DISTDIR
  cp $HOME/home/curry/pakcs/build/pakcs_variables.$BACKEND $HOME/.pakcsinitrc
  cp $HOME/home/curry/pakcs/build/pakcs_variables.$BACKEND pakcsinitrc
  make $MAKEOPTS >> $LOGFILE 2>&1
  if [ $? -gt 0 ] ; then exit_with_message ; fi
  bin/curry :load AllLibraries :eval "3*13+3" :quit >> $LOGFILE 2>&1

  # Run the unit tests:
  gen_currycheck >> $LOGFILE 2>&1
  make $MAKEOPTS runtest >> $LOGFILE 2>&1
  if [ $? -gt 0 ] ; then
    show_logfile
  else
    echo "SUCCESSFULLY FINISHED PAKCS DOWNLOAD BUILD ON `hostname` AT `date`" >> $LOGFILE
    # clean
    #cd $HOME && rm -rf $DISTDIR
  fi
}

# save current .pakcsinitrc
cp -p $HOME/.pakcsinitrc $HOME/.pakcsinitrc.saved

# build PAKCS/git with SICStus-Prolog Version 4:
#build_git_pakcs sicstus4 master
build_git_pakcs sicstus4 pakcs2

# build PAKCS download versions:
build_download_pakcs 2.3.0 src         sicstus4
build_download_pakcs 2.3.0 amd64-Linux sicstus4

# build PAKCS with SWI-Prolog (delete global package cache to avoid
# memory overflows):
/bin/rm -rf $HOME/.cpm/packages
#build_git_pakcs swi8 master
#/bin/rm -rf $HOME/.cpm/packages
#build_download_pakcs 2.3.0 amd64-Linux swi7
/bin/rm -rf $HOME/.cpm/packages
build_download_pakcs 2.3.0 amd64-Linux swi8


# restore saved .pakcsinitrc
mv $HOME/.pakcsinitrc.saved $HOME/.pakcsinitrc
