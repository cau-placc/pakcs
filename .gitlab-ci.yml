image: "skgland/pakcs-swi-ci:latest"

# set TEST_DOWNLOAD=yes to run the download test
# set BUILD_NIGHTLY=yes to build a nightly
# set BUILD_RELEASE=yes to force build a release
#  * won't create a release in gitlab
#  * should probably only be used for testing
# add a tag with name v<major>.<minor>.<release> to trigger a release

# CURRY_LANG_ORG_ACCESS_TOKEN should contain the access-token to update
# the curry-lang.org project, it SHOULD NOT be committed in the git project
# but configured via Gitlab Settings > CI > Variables and should at least be masked
# the corresponding username is currently hard-coded in
#  update_version.sh

variables:
  DOWNLOAD_VERSION: "2.3.0"
  # make sure LANG and LC_ALL are well defined
  LANG: "C.UTF-8"
  LC_ALL: "C.UTF-8"
  # move the stack root and cabal dir to a place where we can cache them
  STACK_ROOT: "${CI_PROJECT_DIR}/.stack-root"
  CABAL_DIR: "${CI_PROJECT_DIR}/.cabal/"
  # cypm configs
  CPM_VERSION: "2.3.0"
  # move .cpm dir to where we can cache it
  BIN_INSTALL_PATH: "${CI_PROJECT_DIR}/.cpm/bin" # also in ci/before_make.sh
  # make the ci checkout submodules recursively
  GIT_SUBMODULE_STRATEGY: recursive
  CURRY_LANG_USER: project_457_bot # the username corresponding to the access token
  CURRY_LANG_EMAIL: project457_bot@example.com # email without '_' before project id
  CURRY_LANG_PROJECT: curry/curry-lang.org
  CURRY_LANG_BRANCH: hakyll
  CURRY_CHECK_VERSION: "3.0.0"
  CURRY_DOC_VERSION: "3.0.0"
  MARKDOWN_VERSION: "3.3.0"

# due to the limitations that jobs of the same stage may not depend on each other
# release is split in package_release, release and package_upload
#
# curry-lang-ci is part of the workaround for issue:
# https://gitlab.com/gitlab-org/gitlab/-/issues/246784
# when this is fixes curry-lang-ci may be removed and the [skip ci]
# can be removed from the commit messages in the curry-lang jobs.before_script,
# keeping it this way would keep the pipelines linked potentially giving a better overview
stages:
  - make            # build pakcs
  - test            # run test suite and check versioned tag
  - doc             # build lib and manual
  - package_release # build distribution
  - upload_release  # create tar for webserver
  - tag_release         # create release
  - curry-lang      # commit updated download data to curry-lang.org repo
  - curry-lang-ci   # trigger curry-lang.org repo CI

# cache the stack root, cabal and cpm dir
# on a per branch basis
cache:
  key: "${CI_COMMIT_REF_SLUG}-stack_cache"
  paths:
    - .stack-root/
    - .cabal/
    - .cpm/

# always run except for the nightly download test run
run_make:
  stage: make
  tags: 
    - docker2
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'
    - if: '$CI_PIPELINE_SOURCE == "tag"'
    - if: '$BUILD_NIGHTLY == "yes"'
    - if: '$BUILD_RELEASE == "yes"'
  before_script:
    - export PATH="${CI_PROJECT_DIR}/bin:${BIN_INSTALL_PATH}:${PATH}"
    - echo ${PATH}
    - time ./ci/before_make.sh
  script:
    - time make CI_BUILD=yes
  artifacts:
    paths:
      # this are currently all files that are added from a clean state during `make CI_BUILD=yes`
      - "**/.curry"
      - "**/dist"
      - bin
      - currytools/cpm/src/CPM.Main
      - currytools/optimize/BindingOpt
      - frontend/bin
      - frontend/pkg
      - lib
      - pakcsinitrc
      - scripts/makesavedstate
      - src/pakcs
      - src/pakcsversion.pl
      - src/prologbasics.pl


# only run for the nightly download test run
run_download_make:
  stage: test
  tags:
    - docker2
  rules:
    - if: '$TEST_DOWNLOAD == "yes"'
  variables:
    CURRY_CHECK_VERSION: "2.0.0" # may differ from default version above if download and current branch don't use the same version
  timeout: 2h
  script:
    - ci/make_download.sh

# check that the tag version matches pakcs version
# this failing indicates an incorrect tag version or
# having forgotten to bump pakcs version
check_version:
  stage: test
  rules:
    - if: '$CI_PIPELINE_SOURCE == "tag" && $CI_COMMIT_TAG =~ /^v\d*.\d*.\d*$/i'
  script:
    -  "[[ $CI_COMMIT_TAG == v$(${CI_PROJECT_DIR}/bin/pakcs --numeric-version) ]]"

# run_make is run except for the nightly download test run
run_test:
  stage: test
  tags:
    - docker2
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'
    - if: '$CI_PIPELINE_SOURCE == "tag"'
    - if: '$BUILD_NIGHTLY == "yes"'
    - if: '$BUILD_RELEASE == "yes"'
  needs:
    - job: "run_make"
      artifacts: true
  before_script:
    - export PATH="${CI_PROJECT_DIR}/bin:${BIN_INSTALL_PATH}:${PATH}"
    - echo ${PATH}
    - ./ci/before_make.sh
    - ./bin/pakcs-cypm config
    - ./bin/pakcs-cypm update
    - ./ci/install_currycheck.sh
  script:
    - time make CI_BUILD=yes runalltests RUNTESTPARAMS=-v

# run for the nightly and release runs
make_manual:
  stage: doc
  tags:
    - docker2
  rules:
    - if: '$CI_PIPELINE_SOURCE == "tag"'
    - if: '$BUILD_NIGHTLY == "yes"'
    - if: '$BUILD_RELEASE == "yes"'
  needs:
    - job: "run_make"
      artifacts: true
  before_script:
    - export PATH="${CI_PROJECT_DIR}/bin:${BIN_INSTALL_PATH}:${PATH}"
    - echo ${PATH}
    - ./ci/before_make.sh
    - ./bin/pakcs-cypm config
    - ./bin/pakcs-cypm update
    - ./ci/install_currydoc.sh
    - ./ci/install_markdown.sh
  script:
    - time make CI_BUILD=yes manual
    - echo "MANUAL_JOB_ID=${CI_JOB_ID}" >> manual.env
  artifacts:
    paths:
      - docs/**.pdf
      - docs/**.html
    reports:
      dotenv:
        - manual.env

# run for the nightly and release runs
make_libdoc:
  allow_failure: true
  stage: doc
  tags:
    - docker2
  rules:
    - if: '$CI_PIPELINE_SOURCE == "tag"'
    - if: '$BUILD_NIGHTLY == "yes"'
    - if: '$BUILD_RELEASE == "yes"'
  needs:
    - job: "run_make"
      artifacts: true
  timeout: 2h
  before_script:
    - export PATH="${CI_PROJECT_DIR}/bin:${BIN_INSTALL_PATH}:${PATH}"
    - echo ${PATH}
    - ./ci/before_make.sh
    - ./bin/pakcs-cypm config
    - ./bin/pakcs-cypm update
    - ./ci/install_currydoc.sh
    - ./ci/install_markdown.sh
  script:
    - time make -j -O CI_BUILD=yes libdoc
  artifacts:
    paths:
      - lib/CDOC

# run for the nightly and release runs
# builds the distribution
bundle_tar:
  stage: package_release
  tags:
    - docker2
  needs:
    - job: "run_make"
      artifacts: true
    - job: "make_manual"
      artifacts: true
  rules:
    - if: '$CI_PIPELINE_SOURCE == "tag"'
    - if: '$BUILD_NIGHTLY == "yes"'
    - if: '$BUILD_RELEASE == "yes"'
  before_script:
    - export PATH="${CI_PROJECT_DIR}/bin:${BIN_INSTALL_PATH}:${PATH}"
    - echo ${PATH}
    - ./ci/before_make.sh
  script:
    - time make CI_BUILD=yes dist
    - echo "BUNDLE_JOB_ID=${CI_JOB_ID}" >> bundle.env
  artifacts:
    reports:
      dotenv:
        - bundle.env
    paths:
      - pakcs-*.tar.gz

upload_release:
  stage: upload_release
  tags:
    - docker2
  rules:
    # only for tags matching the versioning scheme v<major>.<minor>.<release>
    - if: '$CI_PIPELINE_SOURCE == "tag" && $CI_COMMIT_TAG =~ /^v\d*.\d*.\d*$/i'
  needs:
    - job: "run_make"
      artifacts: true     # need pakcs binary to determine version
    - job: "make_manual"  # needed for Manual.pdf
      artifacts: true
    - job: "bundle_tar"   # needed for pakcs-<version>-src.tar.gz and pakcs-<version>-<arch>.tar.gz
      artifacts: true
  script: ci/upload_release.sh release

upload_nightly:
  stage: upload_release
  tags:
    - docker2
  rules:
      - if: '$BUILD_NIGHTLY == "yes"'
  needs:
    - job: "run_make"
      artifacts: true     # need pakcs binary to determine version
    - job: "make_manual"  # needed for Manual.pdf
      artifacts: true
    - job: "bundle_tar"   # needed for pakcs-<version>-src.tar.gz and pakcs-<version>-<arch>.tar.gz
      artifacts: true
  script: ci/upload_release.sh nightly

# run for release runs
# generate a .tar for the files that should be deployed for the updated pakcs download page
upload_page_tar:
  stage: upload_release
  tags:
    - docker2
  rules:
      - if: '$CI_PIPELINE_SOURCE == "tag"'
      - if: '$BUILD_RELEASE == "yes"'
  needs:
    - job: "run_make"
      artifacts: true     # need pakcs binary to determine version
    - job: "make_manual"
      artifacts: true
    - job: "make_libdoc"
      artifacts: true
    - job: "bundle_tar"
      artifacts: true
  variables:
    PUBLIC_HTML: "${CI_PROJECT_DIR}/public_html"
    PUBLIC_LIB_HTML: "${CI_PROJECT_DIR}/public_html/lib_pakcs2"
    PUBLIC_DOWNLOAD: "${CI_PROJECT_DIR}/public_html/download"
  before_script:
    - mkdir -p "${PUBLIC_HTML}" "${PUBLIC_LIB_HTML}" "${PUBLIC_DOWNLOAD}"
  script:
    # copy current distribution into latest release
    - cp -p pakcs*.tar.gz "${PUBLIC_DOWNLOAD}"
    # copy manual
    - cp -p docs/Manual.pdf "${PUBLIC_HTML}"
    - ${CI_PROJECT_DIR}/bin/pakcs --numeric-version  # necessary to ensure /root/.pakcsrc is initialized before we try to use the output of pakcs
    - cp -p docs/Manual.pdf "${PUBLIC_DOWNLOAD}/pakcs-$(${CI_PROJECT_DIR}/bin/pakcs --numeric-version)-manual.pdf"
    - cp -p docs/markdown_syntax.html "${PUBLIC_HTML}"
    # copy release notes etc
    - |
      cp -p OLDRELNOTES.html \
            CHANGELOG.html \
            RESOURCES.html \
            docs/RELNOTES.html \
            docs/INSTALL.html \
            docs/GITINSTALL.html \
            docs/CurryStyleGuide.html \
            "${PUBLIC_HTML}"
    # copy current libraries and their documentation
    - cp -rp lib/CDOC/* "${PUBLIC_LIB_HTML}"
    - cp -p "${PUBLIC_LIB_HTML}/PAKCS_libs.html" "${PUBLIC_LIB_HTML}/index.html"
  artifacts:
    paths:
      - "${PUBLIC_HTML}"


# TODO add artifact with link to the packages uploaded in the 'upload_release' job
# we would like to add:
#  pakcs-${VERSION}-amd64.tar.gz (produced by bundle_tar job)
#  pakcs-${VERSION}-src.tar.gz (produced by bundle_tar job)
#  Manual.pdf (produced by make_manual job)
#
# run for release runs triggered by version tag
tag_release:
  stage: tag_release
  tags:
    - docker2
  rules:
    # only for tags matching the versioning scheme v<major>.<minor>.<release>
    - if: '$CI_PIPELINE_SOURCE == "tag" && $CI_COMMIT_TAG =~ /^v\d*.\d*.\d*$/i'
  #  needs:
  #    - job: "bundle_tar"
  #      artifacts: true
  #    - job: "make_manual"
  #      artifacts: true
  script:
    echo "Script can't be blank and is required!"
  release:
    name: "Release $CI_COMMIT_TAG"
    description: 'Created by the Release CI'
    tag_name: "$CI_COMMIT_TAG"
    ref: "$CI_COMMIT_TAG"

# run for nightly runs
# update the latest_nightly.version in the curry-lang.org repo
link_nightly:
  stage: curry-lang
  tags:
    - docker2
  rules:
    - if: '$BUILD_NIGHTLY == "yes"'
  needs:
    - job: "run_make"
      artifacts: true # need pakcs binary for pakcs version
    - job: "bundle_tar"
      artifacts: true # need environment variables for bundle_job_id
    - job: "make_manual"
      artifacts: true # need environment variables for manual_job_id
    - job: upload_nightly # wait for upload
  script:
    - ${CI_PROJECT_DIR}/bin/pakcs --numeric-version
      - ci/update_version.sh nightly


# run for release runs
link_release:
  stage: curry-lang
  tags:
    - docker2
  rules:
    # only for tags matching the versioning scheme v<major>.<minor>.<release>
    - if: '$CI_PIPELINE_SOURCE == "tag" && $CI_COMMIT_TAG =~ /^v\d*.\d*.\d*$/i'
    # or if we explicitly fore a release build
    - if: '$BUILD_RELEASE == "yes"'
  needs:
    - job: "run_make"
      artifacts: true # need pakcs binary for pakcs version
    - job: "bundle_tar"
      artifacts: true # need environment variables for bundle_job_id
    - job: "make_manual"
      artifacts: true # need environment variables for manual_job_id
    - job: upload_release # wait for upload
  script:
    - ${CI_PROJECT_DIR}/bin/pakcs --numeric-version
    - ci/update_version.sh release


# run for nightly and release runs
# the commit done by the link_nightly job should be enough once https://gitlab.com/gitlab-org/gitlab/-/issues/246784 is fixed
downstream:
  stage: curry-lang-ci
  rules:
    - if: '$CI_PIPELINE_SOURCE == "tag" && $CI_COMMIT_TAG =~ /^v\d*.\d*.\d*$/i'
      when: on_success # wait for previous stage to finish
    - if: '$BUILD_RELEASE == "yes"'
      when: on_success # wait for previous stage to finish
    - if: '$BUILD_NIGHTLY == "yes"'
      when: on_success # wait for previous stage to finish
  trigger:
    project: curry/curry-lang.org
    branch: "${CURRY_LANG_BRANCH}"
    strategy: depend
