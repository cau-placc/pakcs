image: "caups/pakcs-swi-ci:24.04"

# set TEST_DOWNLOAD=yes to run the download test
# set BUILD_NIGHTLY=yes to build a nightly
# set TEST_RELEASE=yes to force build a release
# add a tag with name v<major>.<minor>.<release> to trigger a release

# CURRY_LANG_ORG_ACCESS_TOKEN should contain the access-token to update
# the curry-lang.org project, it SHOULD NOT be committed in the git project
# but configured via Gitlab Settings > CI > Variables and should at least be masked
# the corresponding username and associated email address is set bellow,
# using CURRY_LANG_USER and CURRY_LANG_EMAIL respectively

variables:
  # packs version to download from http://www.informatik.uni-kiel.de/~pakcs/download/
  # in the run_download_make job
  DOWNLOAD_VERSION: "3.8.0"
  # make sure LANG and LC_ALL are well defined
  LANG: "C.UTF-8"
  LC_ALL: "C.UTF-8"
  # move the stack root and cabal dir to a place where we can cache them
  STACK_ROOT: "${CI_PROJECT_DIR}/.stack-root"
  CABAL_DIR: "${CI_PROJECT_DIR}/.cabal/"
  # cypm configs
  CPM_VERSION: "3.8.0" # used in ci/before_make.sh
  # move .cpm dir to where we can cache it
  BIN_INSTALL_PATH: "${CI_PROJECT_DIR}/.cpm/bin" # also in ci/before_make.sh
  # make the ci checkout submodules recursively
  GIT_SUBMODULE_STRATEGY: recursive
  # configuration for the link_release and link_nightly jobs
  CURRY_LANG_USER: project_457_bot # the username corresponding to the access token
  CURRY_LANG_EMAIL: project457_bot@example.com # email without '_' before project id
  CURRY_LANG_PROJECT: curry/curry-lang.org
  CURRY_LANG_BRANCH: hakyll
  # versions to install using cypm for run_test and make_manual
  CURRY_CHECK_VERSION: "4.0.0"
  CURRY_DOC_VERSION: "4.0.0"
  MARKDOWN_VERSION: "3.3.0"

# due to the limitations that jobs of the same stage may not depend on each other
# release is split in package_release, release and package_upload
#
# curry-lang-ci is part of the workaround for issue:
# https://gitlab.com/gitlab-org/gitlab/-/issues/246784
# when this is fixes curry-lang-ci may be removed and the [skip ci]
# can be removed from the commit messages in the curry-lang jobs.before_script,
# keeping it this way would keep the pipelines linked potentially giving a better overview
stages:
  - make            # build pakcs
  - test            # run test suite and check versioned tag

# cache the stack root, cabal and cpm dir
# on a per branch basis
cache:
  key: "${CI_COMMIT_REF_SLUG}-stack_cache"
  paths:
    - .stack-root/
    - .cabal/
    - .cpm/

# always run except for the nightly download test run
run_make:
  stage: make
  tags: 
    - docker2
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'
    - if: '$CI_COMMIT_TAG != null'
    - if: '$BUILD_NIGHTLY == "yes"'
    - if: '$TEST_RELEASE == "yes"'
  before_script:
    - source ci/section_helper.sh
    - start_section before_script "Preparing for Job"
    - export PATH="${CI_PROJECT_DIR}/bin:${BIN_INSTALL_PATH}:${PATH}"
    - echo ${PATH}
    - time ./ci/before_make.sh
    # prevent the build stages from disagreeing over the date by generating it once at the start
    - export BUILD_DATE="$(date +%F)"
    - end_section before_script
  script:
    - start_section main_script "Building PAKCS"
    - time make CI_BUILD=yes COMPILERDATE="${BUILD_DATE}"
    - |
      BUILD_PAKCS_VERSION="$("${CI_PROJECT_DIR}"/bin/pakcs --numeric-version)"
      BUILD_PAKCS_ARCH="$(dpkg-architecture -qDEB_BUILD_ARCH)-$(uname -s)"
      echo "BUILD_PAKCS_VERSION=${BUILD_PAKCS_VERSION}
      BUILD_PAKCS_ARCH=${BUILD_PAKCS_ARCH}
      BUILD_DATE=${BUILD_DATE}" >> make.env
    - end_section main_script
  artifacts:
    reports:
      dotenv:
        - make.env
    paths:
      # this are currently all files that are added from a clean state during `make CI_BUILD=yes`
      - "**/.curry"
      - "**/dist"
      - bin
      - currytools/cpm/src/CPM.Main
      - currytools/optimize/BindingOpt
      - frontend/bin
      - frontend/pkg
      - lib
      - pakcsinitrc
      - scripts/makesavedstate
      - src/pakcs
      - src/pakcsversion.pl
      - src/prologbasics.pl
    expire_in: 1 week

# template for test_download_src and test_download_amd64_linux
.test_download:
  stage: test
  # set different image if required for download builds:
  # image: "caups/pakcs-swi-ci:24.04"
  tags:
    - docker2
  rules:
    # only run for the nightly download test run
    - if: '$TEST_DOWNLOAD == "yes"'
  variables:
    # may differ from default version above if download and current branch don't use the same version
    CURRY_CHECK_VERSION: "3.2.0"
    CURRY_DOC_VERSION: "3.1.0"
  timeout: 3h
  before_script:
    - source ci/make_download.sh
  script:
    - build_download_pakcs "${DOWNLOAD_VERSION}" tar_version

# instance of .test_download to test src tar
test_download_src:
  extends: .test_download
  script:
    - build_download_pakcs "${DOWNLOAD_VERSION}" src

# instance of .test_download to test amd64-Linux tar
test_download_amd64_linux:
  extends: .test_download
  script:
    - build_download_pakcs "${DOWNLOAD_VERSION}" amd64-Linux

# check that the tag version matches pakcs version
# this failing indicates an incorrect tag version or
# having forgotten to bump pakcs version
check_version:
  stage: test
  needs:
    - job: "run_make"
      artifacts: true
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v\d*\.\d*\.\d*$/i'
    - if: '$TEST_RELEASE == "yes"'
  script:
    - ci/check_tag_version.sh
  artifacts:
    expire_in: 1 week

# run_test is run except for the nightly download test run
run_test:
  stage: test
  tags:
    - docker2
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'
    - if: '$CI_COMMIT_TAG != null'
    - if: '$BUILD_NIGHTLY == "yes"'
    - if: '$TEST_RELEASE == "yes"'
  needs:
    - job: "run_make"
      artifacts: true
  before_script:
    - source ci/section_helper.sh
    - start_section before_script "Preparing for Job"
    - export PATH="${CI_PROJECT_DIR}/bin:${BIN_INSTALL_PATH}:${PATH}"
    - echo ${PATH}
    - ./ci/before_make.sh
    - end_section before_script
    - start_section cypm "Updating cypm index and installing tools"
    - ./bin/pakcs-cypm config
    - |
      set -ve
      source ci/cypm_helper.sh
      cypm_update
      cypm_install_binary currycheck "${CURRY_CHECK_VERSION}"
    - end_section cypm
  script:
    - start_section main_script "Running Testsuite"
    - time make CI_BUILD=yes runalltests RUNTESTPARAMS=-v
    - end_section main_script "Building Manual"
